buildscript {
	repositories {
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
	}
	dependencies {
		classpath 'com.diffplug.gradle.spotless:spotless:1.3.1'
		classpath 'org.ajoberstar:gradle-imports:1.0.2'
	}
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: "org.ajoberstar.organize-imports"

group = 'org.nh'
version = '0.1.0'

description = """"""

sourceCompatibility = 1.5
targetCompatibility = 1.5


repositories {
        
     maven { url "https://repo.spring.io/libs-release" }
     maven { url "http://repo.maven.apache.org/maven2" }
}
dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version:'1.3.5.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version:'1.3.5.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-rest', version:'1.3.5.RELEASE'
    runtime group: 'org.hsqldb', name: 'hsqldb', version:'2.3.3'
    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version:'1.3.5.RELEASE') {
exclude(module: 'commons-logging')
    }
}


organizeImports {
    sourceSets = project.sourceSets
    sortOrder = [/^(javax?)\./, /^(groovyx?)\./, /^([^\.]+\.[^\.]+)\./]
    staticImportsFirst = true
    removeUnused = true
    includes = ['**/*.java', '**/*..groovy']
}

spotless {
    java {
        //licenseHeader '/* Licensed under Apache-2.0 */' // License header
        //licenseHeaderFile 'spotless.license.java'       // License header file
        // Obviously, you can't specify both licenseHeader and licenseHeaderFile at the same time

        //importOrder ['java', 'javax', 'org', 'com', 'com.diffplug', ''] // An array of package names
        //importOrderFile 'spotless.importorder'                          // An import ordering file, exported from Eclipse
        // As before, you can't specify both importOrder and importOrderFile at the same time
        // You probably want an empty string at the end - all of the imports you didn't specify
        // explicitly will go there.

        eclipseFormatFile 'java-formatter.xml'  // XML file dumped out by the Eclipse formatter
        // If you have an older Eclipse properties file, you can use that too.

        // You can also tweak the formatting with custom regexes or functions, such as:
        // Eclipse formatter screws up long literals with underscores inside of annotations (see issue #14)
        //    @Max(value = 9_999_999 L) // what Eclipse does
        //    @Max(value = 9_999_999L)  // what I wish Eclipse did
        custom 'Long literal fix', { it.replaceAll('([0-9_]+) [Ll]', '$1L') }

        // By default, all Java source sets will be formatted.  To change
        // this, set the 'target' parameter as described in the next section.
    }
}

organizeImports.dependsOn {
    spotlessApply
}

compileJava.dependsOn {
    organizeImports 
}
